第2章 OOP基本概念
    真理形成的两大要素----事实和抽象. ----雷.德.古尔蒙

    2.1 抽象
        Tips:PHP允许常量作为接口的一部分.
        定义:
        抽象(abstraction)指示一个对象的基本特征,使这个对象与所有其他对象区分开,进而对查看者而言,提供了清晰定义的概念边界.
        抽象是用来处理复杂性的主要工具.一个问题越复杂,越需要抽象去解决.
        类是一种抽象,抽象内容为:对数据的一系列操作.

        2.1.1 抽象类
            抽象类为项目提供一种组织机制.
            定义:
            方法的签名(signature):方法名+参数(参数类型+形参名)+返回类型(PHP只有返回类型 GO有返回类型+返回参数名)
            接口(interface):一个对象的所有签名

        2.1.2 抽象属性和方法
            PHP没有抽象属性(abstract properties)的概念.
            抽象方法的访问控制:
            抽象方法到实现方法之间的访问控制只能越来越松散,不能越来越严格.
            由于PHP不支持多重继承,因此出现了Trait这种结构.(本书中没有使用到这个结构.)

        2.1.3 接口
            interface中不能包含具体方法或变量,但是可以包含常量(PHP中特有的).
            接口中方法签名的的访问控制符只能为public,所以实际上是可以不写的.
            接口中方法签名到实现方法之间的访问控制和抽象方法一样,只能越来越松散,不能越来越严格.
            但是由于接口中方法签名的访问控制符只能为public.所以实现方法也只能为public.

        2.1.4 接口和常量
            作用域解析操作符(scope resolution operator) ::
            作用:在类和接口实现中存取常量以及调用静态方法.换言之,作用域解析操作符操作的资源都是与类相关而非与方法相关的.

            抽象类和接口:两种"接口类型"
                "接口"的普适性理解:一个对象(实际上也就是一个类)的签名集合
                二者相同点:都是方法的一般规则.即一个类中所有方法签名的集合.
                二者不同点:抽象类可以有具体方法和属性.而接口只能有常量.
                对于一个对象而言,它的接口描述了:可以发送到这个对象的所有请求的集合.
                e.g 如果Client类知道某个对象的接口,则Client类就会知道对于这个对象能够请求什么以及如何请求.

        2.1.5 类型提示:类似数据类型
            指定参数类型为接口而非具体实现.其背后的含义为:面向接口编程而非面向实现编程.而在实践的过程中,这句话
            就表示着对数据的引用是通过父类来完成的.
            从实际开发角度来讲,参数类型提示确保了给定方法中使用的对象(类)必然存在给定的接口.
            但使用接口作为类型提示时,这个绑定条件变的宽松了.这是一个良构的表现,因为随着系统的复杂度上升,
            细节会越来越多,但方法之间只要遵循接口,就可以做到任意改动细节而不破坏程序.而且所做修改不会与具体实现耦合在一起.

    2.2 封装
        定义:
        封装(encapsulation)是划分一个抽象中诸多元素的过程,这些元素构成该抽象的结构和行为;封装的作用是将抽象的契约接口与其
        实现分离.
        也就是说,封装实际上是一个划分(compartments).把一个复杂问题模块化为多个可解决的子问题,就可以使用封装来得到这些比较小
        的抽象,并对它们完成划分(compartmentalizing)
        直接使用信息隐藏(information hiding)来描述封装不是太合适.后文会介绍原因.

        2.2.1 日常生活中的封装
            封装的目的:隐藏细节的复杂性.
            正是因为封装,对象才成为了一个对象.想要访问对象中的功能,应由程序结构控制.类通过限制访问其中的方法和属性来实现封装.
            所以在封装这个大前提下提及信息隐藏,指的是一个模块的细节或许是隐藏的,只能通过类定义好的方式来使用这个模块,而不能修改/
            利用这个模块的细节.

        2.2.2 通过可见性保护封装
            定义:
                可见性:对类中成员属性和成员方法的访问控制.

            Private:
                最严格访问控制.访问控制被设置为private的成员属性(方法)只能在本类中被访问到.
                TODO:如果通过 public function __construct()来实例化类,则另一个对象可以访问私有成员属性和方法. 这句话啥意思?

            Protected:
                低于private的访问控制,访问控制被设置为protected的成员属性(方法)只能在本类及其子类中被访问到.
                protected访问控制符的作用在于:对系统中更大的结构完成封装.这个"更大的结构",可以由其子类和父类一起构成.

            Public:
                最宽松的访问控制.访问控制被设置为public的成员属性(方法)无论在哪个作用域内均可被访问到.
                要作为一个真正在系统中有用处的类,则在这个类中至少有一些方法是public的.哪怕只有构造方法也好.
                TODO:public访问控制符的作用在于:为公有成员属性(方法)提供一个途径,从而可以与一个没有构造函数自启动的对象保持交流. 这句话啥意思?

        2.2.3 获取方法和设置方法
            OOP设计建议使用获取方法(getters 也叫存取方法 accessors)和设置方法(setters 也叫修改方法mutators).不建议能够直接
            在类的外部赋值/修改该类内部的值.

            ※:不要直接请求完成一个工作所需的信息,而应当请求拥有这个信息的对象为你完成工作.

            设计模式的目的:建立对象之间的通信链路.

            OOP中的通信:在过程式编程中,过程(process)完全写在一处,即按顺序编写一系列指令.而在面向对象(OO)编程中,过程的意义为对象
            之间一系列消息.对象A向对象B发送消息,就会完成过程的一部分;然后再向对象C发送一部分新的消息,进而完成了过程的另一部分;如此继续.
            ※:要修改一个过程,只需重新组织消息序列,而非改变一个过程(procedure).

            设计模式的任务之一:保持封装的同时还要保持类之间的通信.

    2.3 继承
        继承(inheritance):类A如果扩展了类B,就会拥有这个类的所有非私有的成员属性和成员方法.进而可以基于此来扩展功能.
        继承在系统中表现出的优点在于:为不同的类建立了一种结构(实际上我个人理解这更像一个"层次"的感觉).
        在生产过程中,通常类与类之间是松绑定的.也就是继承抽象类,而且是浅继承,只有一层子类.这么做的好处在于:如果类与类
        之间是一个深层次的继承,那么在继承链上对一个处于上游位置的类进行修改,即使是很简单的修改,都会影响整个继承链上的类.

    2.4 多态
        多态(polymorphism)实际上就是字面意思,多种形态.其真正的用途和价值在于:可以调用有相同接口的对象来完成不同的工作.
        在大型复杂的系统中,对代码的改动可能带来巨大的影响,因此需要有一个公共的接口来定义多个类对于同一个方法的签名,以便
        减小改动带来错误的可能性.

        2.4.1 一个名字,多个实现
            PHP的方法签名不包含返回值类型.因此,一旦实现混乱,就有可能出现同样接口的实现,其返回值的类型是不同的.多态的
            价值在于,即便形态不同,但总是可以依靠接口(也就是方法签名)指导实现.

        2.4.2 设计模式中的内建多态性
            Pattern Design的一些模式中,有些自己就有多态的特征.例如策略模式.