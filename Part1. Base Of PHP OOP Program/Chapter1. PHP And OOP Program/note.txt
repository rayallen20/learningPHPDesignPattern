第1章 PHP与面向对象编程
    1.1 中级和高级编程初探
    1.2 为什么采用面向对象编程

        1.2.1 解决问题更容易
            过程式编程:拆解问题.将大问题分解为小问题.其策略在于:先解决各个较小的问题,然后把所有结果汇总在一起,
            形成一个更大的解决方案.

        1.2.2 模块化
            模块化过程:把一个问题分解为小的子问题的过程即为模块化过程.
            注:模块化"过程",也是一个"过程".
            问1:什么是模块?(类?)
            OOP编程的出发点:把复杂问题简单化.
            注1:以"一般化"的思路看问题.(数独和异形数独)
    1.3 类与对象
        分解一个复杂问题,会把它变换成多个简单的子问题.而多个简单的子问题构成了一个模块.但是需要一种方式来组织多个模块,
        让它们能够相互协作共同处理要解决的大问题.
        其中一种组织方式为:把一个模块看作是相关函数的一个集合.
        答1:模块是类.
        类本身由2大部分组成:属性和方法.
        注2:所以一个类实际上就是一种自定义的数据结构.

        1.3.1 单一职责原则(SRP Single Responsibility Principle)
            类是有共同特征的对象的集合.这里的"共同特征"不是指对象是相同的,而是指它们都处理模块(类)的共同问题.
            问2:我的理解是:同一个类的不同对象都在处理这个类要解决的问题.那么,为什么不能使用同一个对象来处理问题呢?
            OOP编程原则:单一职责原则(SRP Single Responsibility Principle).也就是说,一个类应当只有一个职责.
            换言之:一个类应该有且只有一个变化的原因.
            之所以需要把复杂问题分解为简单模块,其目的在于能够把它转化为多个容易解决的问题.而通过限制类的职责单一,
            可以做到:
                1. 为什么要对问题模块化
                2. 更容易地组织模块(粒度增大)
            来看一个需求,以便加深对SRP的理解.
            某个网站,需要确定访问者的设备类型(如:PC 平板 手机)以及使用的浏览器.
            工具:$SERVER['HTTP_USER_AGENT']
            如何实现?
            代码:1.3.1 SRP-book/TellAll为书上的实现 SRP-self/TellAll为自己的实现

        1.3.2 PHP中的构造函数
            略.

    1.4 客户类作为请求者
        Client类就是我在其他书籍中看到的"客户端代码"的概念.即调用方.其主要作用为向"构成设计模式的类"发出请求.
        设计模式最重要的特性之一:对象的重用.
        你所做的需求,只是众多需求中的一个特例.

    1.5 速度如何
        快速应对需求的变化,也是一种速度的提升.

        1.5.1 开发和修改速度
            设计模式解决的是开发速度问题.

        1.5.2 团队速度
            可以让团队间有着公共的术语.提高沟通效率.例如"工厂"、"状态机"、"观察者"说的是同一个东西.
            可以让团队中的程序员们分头工作,最后将工作汇总到一起.

    1.6 顺序和过程式编程有什么问题
        如果一个方案可行,那么就想当然地接受这个方案.这种态度会成为阻碍.阻碍你取得进展和提升.

        1.6.1 顺序编程
            逐条语句编写,一系列的语句组成了一个程序.

        1.6.2 过程编程(procedure)
            过程编程引入了函数.函数让代码被分组为模块,进而通过不同的实参得到不同的结果.
            这时已经有了OOP的最初模型:模块化和重用.但过程编程没有类,也就无法将编程任务
            打包到对象.换言之,就是无法自定义数据结构.因为没有类这个概念就无法将基础数据
            结构组织在一起.

        1.6.3 即使回报还是长期回报
            设计面向对象软件很困难.
            设计可重用面向对象软件更困难.