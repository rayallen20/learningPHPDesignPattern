第4章 结合使用设计模式和UML
历史以及当前的社会结构中,社会形态的最初阶段都是如此:一个紧紧闭合的小圆圈,独立于周边那些千奇百怪甚至在某种程度上敌对的圆圈.--格奥尔格.齐美尔
人们只有将个人的生活与社会的历史这两者放在一起认识,才能真正理解他们.--C.怀特.米尔斯

    4.1 为什么是统一建模语言(UML)
        由于PHP是弱类型语言,直接看着一个UML去实现一个设计模式比较困难.但不是无解.2个解法:
        1. 调整数据类型(个人认为这条路不太走得通.因为PHP对array的类型限制做的不够,无法限制一个array中的元素类型.)
        2. 深刻理解设计模式(个人认为这是走得通的,也是我想要的.)

    4.2 类图
        类图表达的内容:参与者之间的关系和通信.
        类图和样例要求见 类图样例.pdf 和 类与参与者符号样例及要求.pdf

    4.3 参与者符号
        参与者:构成设计模式的类和接口.
        类图和样例要求见 类图样例.pdf 和 类与参与者符号样例及要求.pdf

    4.4 关系说明
        4.4.1 相识(acquaintance)关系
            概念:一个参与者包含另一个参与者的引用.
            具体例子见4.4.1 acquaintance/Proxy.php
            图例:关系符号样例.pdf

        4.4.2 聚合关系
            概念:从关系上讲,和相识关系相同.都是一个类的实例持有其他类的一个或多个实例.但从紧密程度上讲,与相识关系不同.
            一个聚合对象与它的所有者有着相同的生命周期.也就是说,如果一个停止工作,另一个也会停止,无法继续正常工作.
            Tips:
            关于聚合和组合,有一些观点和本书提出观点完全相反.
            《深入PHP面向对象、模式与实践》(第3版) Page109:
            原文:
            在聚合的情况下,被包含对象是容器的一个核心部分,但是它们也可以同时被其他对象所包含.
            在组合中,被包含对象只能被它的容器所引用,当容器被删除时,它也应该被删除.
            书中例子:
            学校班级与学生之间的关系,就属于《深入PHP面向对象、模式与实践》一书中说的"聚合"的关系.当一个班级被删除时,客观世界中也只是把原本属于这个班级的
            学生分配到其他班级中,而非将这些学生也删除.换言之,按照《Learning PHP 设计模式》一书的说法,"学校班级"类和"学生"类
            的声明周期是不相同的,也就是《Learning PHP 设计模式》一书中所说的相识(acquaintance)关系;
            个人与社会安全信息之间的关系,就属于《深入PHP面向对象、模式与实践》一书中说的"组合"的关系.某人的社会安全信息只属于这个个人,当这个个人被删除时,
            只属于这个人的社会安全信息也就不再有存在的价值和意义了,也应该被删除.换言之,按照《Learning PHP 设计模式》一书的说法,"个人"类和"社会安全信息"类
            的实例,应该有着同样的声明周期,也就是《Learning PHP 设计模式》一书中所说的聚合(aggregation)关系;

            https://blog.csdn.net/u012557814/article/details/79461756
            本博文认为组合的父子关系是强于聚合的.使用的例子:
            聚合:班级与学生
            组合:身体与细胞
            本博文核心观点:
            聚合是HAS-A的关系
            组合是PART-A的关系

            https://www.cnblogs.com/jiqing9006/p/5915023.html
            本博文认为组合的父子关系强于聚合.使用的例子:
            聚合:雁群与大雁
            组合:大雁与翅膀
            本博文核心观点:
            聚合体现的是整体与部分之间的"拥有"关系,即HAS-A的关系.
            组合体现的是整体与部分之间的"包含"关系,即CONTAINS-A的关系.整体的生命周期结束也就意味着部分的生命周期随之结束.
            但是两者在代码层面没有区别,只能从语义级别区分.

            https://zhidao.baidu.com/question/587261083.html
            本回答认为组合的父子关系强于聚合.
            组合:A类中包含B类的一个引用b,当A类被释放时,b也被同时释放掉了.
            聚合:与组合相反,如果b还被其他对象引用了,则b不会被释放,不属于上文中说的CONTAINS-A的关系,b可以独立于A而存在.
            实际使用:
            组合:A类的构造方法中实例化B类,即:当A类被实例化时,B类的实例随之产生;当A类的实例被释放时,这个实例中包含的B类的实例也随之被释放.
            聚合:在实例化A类的过程中并不立即实例化B类,而是等待外部传递给A类的实例;但对于A类的实例来讲,并不知道外接是否还有其他实例引用了这个
            B类的实例.

            我的观点:
            我认为组合是强于聚合的.
            理由:从UML来看,组合是实心箭头,聚合是空心箭头.在数学领域中,开区间是空心圆圈;闭区间是实心圆圈;我根据这个理由,判断实心箭头
            想表达的关系是强于空心箭头的.所以我认为是组合的父子关系强于聚合.
            图例:关系符号样例.pdf

            问题:为什么继承和实现(implements)都使用同一个符号来表示?
            回答:从2个视角来回答这个问题.
                视角1:UML的视角.
                UML关心的是参与者之间的关系,而非这个关系的实现手段(所谓实现手段即:通过继承或实现(implements)来实现一个关系. 而这里的关系
                描述的是2个参与者之间的关系,具体指的是:参与者A持有参与者B的一个或多个实例)
                视角2:设计模式的视角
                在同一个设计模式的不同实现中,有可能实现A使用的是继承,而实现B使用的是实现(implements).对于一个设计模式而言,这2个参与者之间
                只要实现了设计模式定义的关系就可以,设计模式并不关心这个关系的实现手段.