第4章 结合使用设计模式和UML
历史以及当前的社会结构中,社会形态的最初阶段都是如此:一个紧紧闭合的小圆圈,独立于周边那些千奇百怪甚至在某种程度上敌对的圆圈.--格奥尔格.齐美尔
人们只有将个人的生活与社会的历史这两者放在一起认识,才能真正理解他们.--C.怀特.米尔斯

    4.1 为什么是统一建模语言(UML)
        由于PHP是弱类型语言,直接看着一个UML去实现一个设计模式比较困难.但不是无解.2个解法:
        1. 调整数据类型(个人认为这条路不太走得通.因为PHP对array的类型限制做的不够,无法限制一个array中的元素类型.)
        2. 深刻理解设计模式(个人认为这是走得通的,也是我想要的.)

    4.2 类图
        类图表达的内容:参与者之间的关系和通信.
        类图和样例要求见 类图样例.pdf 和 类与参与者符号样例及要求.pdf

    4.3 参与者符号
        参与者:构成设计模式的类和接口.
        类图和样例要求见 类图样例.pdf 和 类与参与者符号样例及要求.pdf

    4.4 关系说明
        4.4.1 相识(acquaintance)关系
            概念:一个参与者包含另一个参与者的引用.
            具体例子见4.4.1 acquaintance/Proxy.php
            图例:关系符号样例.pdf

        4.4.2 聚合关系
            概念:从关系上讲,和相识关系相同.都是一个类的实例持有其他类的一个或多个实例.但从紧密程度上讲,与相识关系不同.
            一个聚合对象与它的所有者有着相同的生命周期.也就是说,如果一个停止工作,另一个也会停止,无法继续正常工作.
            Tips:
            关于聚合和组合,有一些观点和本书提出观点完全相反.
            《深入PHP面向对象、模式与实践》(第3版) Page109:
            原文:
            在聚合的情况下,被包含对象是容器的一个核心部分,但是它们也可以同时被其他对象所包含.
            在组合中,被包含对象只能被它的容器所引用,当容器被删除时,它也应该被删除.
            书中例子:
            学校班级与学生之间的关系,就属于《深入PHP面向对象、模式与实践》一书中说的"聚合"的关系.当一个班级被删除时,客观世界中也只是把原本属于这个班级的
            学生分配到其他班级中,而非将这些学生也删除.换言之,按照《Learning PHP 设计模式》一书的说法,"学校班级"类和"学生"类
            的声明周期是不相同的,也就是《Learning PHP 设计模式》一书中所说的相识(acquaintance)关系;
            个人与社会安全信息之间的关系,就属于《深入PHP面向对象、模式与实践》一书中说的"组合"的关系.某人的社会安全信息只属于这个个人,当这个个人被删除时,
            只属于这个人的社会安全信息也就不再有存在的价值和意义了,也应该被删除.换言之,按照《Learning PHP 设计模式》一书的说法,"个人"类和"社会安全信息"类
            的实例,应该有着同样的声明周期,也就是《Learning PHP 设计模式》一书中所说的聚合(aggregation)关系;

            https://blog.csdn.net/u012557814/article/details/79461756
            本博文认为组合的父子关系是强于聚合的.使用的例子:
            聚合:班级与学生
            组合:身体与细胞
            本博文核心观点:
            聚合是HAS-A的关系
            组合是PART-A的关系

            https://www.cnblogs.com/jiqing9006/p/5915023.html
            本博文认为组合的父子关系强于聚合.使用的例子:
            聚合:雁群与大雁
            组合:大雁与翅膀
            本博文核心观点:
            聚合体现的是整体与部分之间的"拥有"关系,即HAS-A的关系.
            组合体现的是整体与部分之间的"包含"关系,即CONTAINS-A的关系.整体的生命周期结束也就意味着部分的生命周期随之结束.
            但是两者在代码层面没有区别,只能从语义级别区分.

            https://zhidao.baidu.com/question/587261083.html
            本回答认为组合的父子关系强于聚合.
            组合:A类中包含B类的一个引用b,当A类被释放时,b也被同时释放掉了.
            聚合:与组合相反,如果b还被其他对象引用了,则b不会被释放,不属于上文中说的CONTAINS-A的关系,b可以独立于A而存在.
            实际使用:
            组合:A类的构造方法中实例化B类,即:当A类被实例化时,B类的实例随之产生;当A类的实例被释放时,这个实例中包含的B类的实例也随之被释放.
            聚合:在实例化A类的过程中并不立即实例化B类,而是等待外部传递给A类的实例;但对于A类的实例来讲,并不知道外接是否还有其他实例引用了这个
            B类的实例.

            我的观点:
            我认为组合是强于聚合的.
            理由:从UML来看,组合是实心箭头,聚合是空心箭头.在数学领域中,开区间是空心圆圈;闭区间是实心圆圈;我根据这个理由,判断实心箭头
            想表达的关系是强于空心箭头的.所以我认为是组合的父子关系强于聚合.
            图例:关系符号样例.pdf

            问题:为什么继承和实现(implements)都使用同一个符号来表示?
            回答:从2个视角来回答这个问题.
                视角1:UML的视角.
                UML关心的是参与者之间的关系,而非这个关系的实现手段(所谓实现手段即:通过继承或实现(implements)来实现一个关系. 而这里的关系
                描述的是2个参与者之间的关系,具体指的是:参与者A持有参与者B的一个或多个实例)
                视角2:设计模式的视角
                在同一个设计模式的不同实现中,有可能实现A使用的是继承,而实现B使用的是实现(implements).对于一个设计模式而言,这2个参与者之间
                只要实现了设计模式定义的关系就可以,设计模式并不关心这个关系的实现手段.

        4.4.3 继承和实现关系
            概念:参与者A继承参与者B,表明A可以使用B的非私有成员属性和成员方法.
            图例:关系符号样例.pdf
            问题:为什么继承和实现使用同样的符号?
                从2个视角上回答这个问题.
                1. UML的角度
                从UML的角度上来讲,表示继承或实现的符号着重想表达的是参与者之间的关系,而非是这个关系的实现手段,换言之,UML不关心
                实现继承或实现的手段究竟是继承还是实现.
                2. 设计模式的角度
                从设计模式的实现上来讲也是同样道理.在同一个模式的不同实现中,有可能实现方案A使用继承来实现,而实现方案B使用的是接口来实现.
                但对于一个设计模式而言,这2(多)个参与者之间只要实现了设计模式定义的关系就可以,设计模式并不关心这个关系的实现手段.

        术语的多重含义
            a. 接口
            定义:抽象类和接口都称为接口.而实际上本书中的接口想表达的含义是:抽象类或接口中未实现的方法和属性的集合.
            特性:在模式中提供松绑定.(//TODO: 实际上我理解不了这句话)

            b. 实现
            定义:实现了某个抽象类或接口的具体类.实际上此处的"实现"是一个缩写,常理上都可以理解的一件事情是:需要先继承才能实现.
            所以实际上此处这个"实现"的概念指的是"继承和实现".
            特性:具体类必须确定一个具体实现.

            c. 操作
            定义:完成某个工作的一段程序.它可能与函数(function)或方法(method)是同义词,也可能表示类之间发生的多个不同事件.
            这里需要解释的是"事件"二字.
            事件:
                1. 参与者A对外暴露一个方法,该方法用于实例化参与者B.这样的操作就是方法(函数).
                2. "包装"参与者A,以便实例化参与者B.这种情况下操作可能只是某方法的一部分,或构造函数中的一行代码.
                我理解这句话想表达的内容是:在参与者A的构造方法中实例化参与者B.
                // TODO:我对"包装"二字实际上没有理解.

            d. 灵活思考
            每个设计模式,都要思考3个问题:
                1. 参与者(对象)之间的关系如何?
                2. 导致重新设计的原因是什么?
                3. 如何封装这些变化?(导致重新设计的变化)

        4.4.4 创建关系
            定义:一个对象创建另一个对象的实例
            创建关系与相识关系的异同:
                同:都需要创建对象
                异:相识关系创建一个对象的目的是为了"包含"这个对象;创建关系创建一个对象的目的是为了"使用"这个对象.
            在UML中的具体应用场景:
                参与者A"创建"参与者B,并在自己内部使用 => 相识
                参与者A"创建"参与者B,并将创建的产物提供给他人使用 => 创建

        4.4.5 多重关系
            定义:引用或聚合多个对象
            //TODO:享元模式:用于减少创建对象的数量,以便减少内存占用,提高性能.
            https://www.runoob.com/design-pattern/flyweight-pattern.html

    4.5 对象图
        用途:查看一个设计模式特定实现以及通过这个模式生成的对象之间的关系.

    4.6 交互图
        用途:跟踪执行请求的顺序

    4.7 面向对象编程中图和记法的作用
        图和记法的作用:解释、分析和构建设计模式

    4.8 UML工具
        不要一上来就用UML工具!至少以我现在的水平,它只能帮助我构建一些更糟的设计,而且是加速构建.如果没有这个工具,
        或许我制造的次品没这么快出炉.

    4.9 其他UML
        // TODO:状态图
        这个阶段,重点关注含义!