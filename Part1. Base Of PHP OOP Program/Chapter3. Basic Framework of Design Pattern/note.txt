第3章 基本设计模式概念
大型组织往往很松散.不,更确切地讲,几乎可以认为它根本没有组织.----吉尔伯特.基思.切斯特顿
如果你唯一的工具是一把锤子,你很可能把一切问题都看成钉子.----亚伯拉罕.马斯洛
因为事物有它自己的方式,它们不会墨守成规.----贝尔托.布莱希特

    3.1 MVC实现编程松耦合和重新聚焦
        松耦合:在生产中MVC三部分经常变化的其实是视图层.如果视图的变化导致了
              视图之外的代码发生变化,这就是不合理的设计.同理,当DB结构发生变化
              时,也应该只涉及到模型层面的变化.这就是MVC模式带来的松耦合.

        展示松耦合:MVC模式展示了松耦合而非直接调用功能.
                 手段:分离不同元素,但这些不同元素完成的是同一个功能.
                 目的:为系统提供灵活性.
                 结论:越庞大的系统,越需要灵活性.
                 感悟:越复杂的系统,其内容和功能就越多.发生改动的可能性也就越大.越需要灵活性.
                 所谓灵活性:系统应对变化的能力.


    3.2 设计模式的基本原则
        3.2.1 第一个设计模式原则
            结论:面向接口编程而非面向实现编程.
            手段:将变量类型设置为抽象类或接口,而非具体实现类.
            目的:解耦设计与实现.
            感悟:什么叫设计?什么叫实现?
                设计:抽象类/接口
                实现:具体实现类
                引起抽象类发生改变的理由应该是抽象类所描述的客体在大方向上发生了改变,而非是这个客体
                在细节上发生了改变.客体在细节上的改变应该由实现类负责处理,而大方向上的改变才应该由抽象类/接口来处理,
                因此说是解耦设计与实现.
                依赖倒置原则?

        3.2.2 代码提示中使用接口数据类型
            结论:形参列表中使用抽象类/接口作为类型提示.而非具体实现类.

        3.2.3 抽象类及其接口
            此处的接口是指:方法及其签名.
            即: 接口 = 一个类的所有(方法 + 方法名 + 形参列表 + 返回值类型)
            问题:这里的方法指的是什么?
            每个类都有一个接口.由其方法签名组成.实际上实现一个抽象类的过程就像是 implements a interface 一样.

        3.2.4 第二个设计模式原则
            结论:组合优于继承.
            手段:在开发时如果有机会使用组合,就应当优先使用组合,而非继承.
            目的:减少实现类受继承影响导致获得大量该实现类并不会使用到的属性和方法,进而引起一个类的过度"肥胖".

        3.2.5 使用客户的基本组合
            此处举例说明继承和组合的区别.
            本例使用1个父类和1个子类展示继承,另外使用2个单独的类展示组合.
            组合在大型系统中的优势:避免维护抽象体系中,每1个层次上的每1个子类.而且当父类出现修改时,不会牵连到
            与这个类不相关的类.
            个人理解:
                    组合:2个类是正交的,唯一的一个点是2个类的交集,或者可以说是通讯节点.
                    继承:2个类是超集与子集的关系.如果使用继承替代组合,那么就是将2部分本该是正交的内容转化为了超集与子集的关系.